{"version":3,"sources":["video/loop.mp4","video/urb_favicon_black.svg","video/urb_logo_black.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","handleScroll","playVideo","refs","vidRef","play","document","getElementById","className","pauseVideo","pause","me","state","callback","isScrolling","window","addEventListener","event","clearTimeout","setTimeout","scrollStop","this","removeEventListener","props","isMobile","isTablet","src","favicon","alt","logo","id","ref","loop","type","muted","Component","withGetScreen","Boolean","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0FAAAA,EAAOC,QAAU,IAA0B,kC,mBCA3CD,EAAOC,QAAU,IAA0B,+C,mBCA3CD,EAAOC,QAAU,IAA0B,4C,oRCQrCC,E,YACJ,aAAe,IAAD,uBACZ,+CA+CFC,aAAe,WACb,EAAKC,aAjDO,EAqDdA,UAAY,WACV,EAAKC,KAAKC,OAAOC,OACjBC,SAASC,eAAe,UAAUC,UAAY,cAvDlC,EA4DdC,WAAa,WACX,EAAKN,KAAKC,OAAOM,QACjBJ,SAASC,eAAe,UAAUC,UAAY,iBA5D9C,IAAMG,EAAE,eACR,EAAKC,MAAQ,GAHD,OAKK,SAAUC,GAMzB,IAAIC,EAHCD,GAAgC,oBAAbA,GAMxBE,OAAOC,iBAAiB,UAAU,SAAUC,GAG1CF,OAAOG,aAAaJ,GAGpBA,EAAcK,YAAW,WAGvBN,MAEC,QAEF,GAILO,EAAW,WACTT,EAAGF,gBAhCO,E,iFAwCZM,OAAOC,iBAAiB,SAAUK,KAAKpB,gB,6CAKvCc,OAAOO,oBAAoB,SAAUD,KAAKpB,gB,+BA8B1C,OAAIoB,KAAKE,MAAMC,YAAcH,KAAKE,MAAME,WAIpC,gDAeA,6BAME,yBAAKjB,UAAU,SACb,yBAAKkB,IAAKC,IAASC,IAAI,GAAGpB,UAAU,UAGtC,yBAAKA,UAAU,SAAf,mBAIA,yBAAKA,UAAU,SACf,yBAAKkB,IAAKG,IAAMD,IAAI,GAAGpB,UAAU,UAKjC,yBAAKA,UAAU,mBACb,2BACEsB,GAAG,SACHtB,UAAU,gBACVuB,IAAI,SACJL,IAAKM,IACLC,KAAK,YACLD,MAAI,EACJE,OAAK,U,GA3HDC,aAmJHC,0BAAcpC,GC/ITqC,QACW,cAA7BtB,OAAOuB,SAASC,UAEe,UAA7BxB,OAAOuB,SAASC,UAEhBxB,OAAOuB,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASpC,SAASC,eAAe,SD6H3C,kBAAmBoC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.5e8b3f99.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/loop.f2e01edd.mp4\";","module.exports = __webpack_public_path__ + \"static/media/urb_favicon_black.fd9f7b6a.svg\";","module.exports = __webpack_public_path__ + \"static/media/urb_logo_black.1d679ac4.svg\";","import React, { Component } from 'react';\nimport './App.css';\nimport loop from \"./video/loop.mp4\";\nimport favicon from \"./video/urb_favicon_black.svg\";\nimport logo from \"./video/urb_logo_black.svg\";\nimport { withGetScreen } from 'react-getscreen'\n\n\nclass App extends Component {\n  constructor() {\n    super();\n    const me = this\n    this.state = {\n    };\n    var scrollStop = function (callback) {\n\n      // Make sure a valid callback was provided\n      if (!callback || typeof callback !== 'function') return;\n\n      // Setup scrolling variable\n      var isScrolling;\n\n      // Listen for scroll events\n      window.addEventListener('scroll', function (event) {\n\n        // Clear our timeout throughout the scroll\n        window.clearTimeout(isScrolling);\n\n        // Set a timeout to run after scrolling ends\n        isScrolling = setTimeout(function () {\n\n          // Run the callback\n          callback();\n\n        }, 666);\n\n      }, false);\n\n    };\n\n    scrollStop(function () {\n      me.pauseVideo()\n\n    });\n  }\n\n\n\n  componentDidMount() {\n    window.addEventListener('scroll', this.handleScroll);\n\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('scroll', this.handleScroll);\n  }\n\n  handleScroll = () => {\n    this.playVideo()\n  }\n\n\n  playVideo = () => {\n    this.refs.vidRef.play();\n    document.getElementById(\"video1\").className = \"mouseHover\";\n\n\n  };\n\n  pauseVideo = () => {\n    this.refs.vidRef.pause();\n    document.getElementById(\"video1\").className = \"mouseNotHover\";\n\n\n  };\n\n\n\n\n\n  render() {\n\n    ////// Moblie version\n\n    if (this.props.isMobile() || this.props.isTablet()) {\n      return (\n\n\n        <div>\n          tablette iphone\n        </div>\n      )\n\n\n\n    }\n\n\n\n    ////// Desktop version\n    else {\n\n      return (\n        <div>\n\n\n\n\n\n          <div className=\"allo2\">\n            <img src={favicon} alt=\"\" className=\"logo\" />\n          </div>\n\n          <div className=\"allo2\">\n            Going Live 2022\n          </div>\n\n          <div className=\"allo2\">\n          <img src={logo} alt=\"\" className=\"logo\" />\n          </div>\n\n\n\n          <div className=\"colorBackground\">\n            <video\n              id=\"video1\"\n              className=\"mouseNotHover\"\n              ref=\"vidRef\"\n              src={loop}\n              type=\"video/mp4\"\n              loop\n              muted\n            />\n          </div>\n\n\n\n\n\n\n\n\n\n\n\n        </div>\n      )\n\n    }\n\n\n\n  }\n}\n\nexport default withGetScreen(App);\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}